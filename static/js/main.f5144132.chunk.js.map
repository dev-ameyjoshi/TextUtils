{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f5144132.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n      return (\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light' ? 'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> Enable DarkMode</label>\r\n      </div>\r\n\r\n      \r\n      </div>\r\n  </div>\r\n</nav>\r\n      )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title : PropTypes.string.isRequired,\r\n  aboutText : PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title:'Set title here',\r\n  aboutText:'About'\r\n};","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n      const handleUpClick = () => {\r\n            // console.log(\"Upper case was clicked\" + text);\r\n            let newText = text.toUpperCase();\r\n            setText(newText)\r\n            props.showAlert(\"Converted to upper case\",\"success\");\r\n      }\r\n      const handleLowClick = () =>{\r\n            let newText = text.toLowerCase();\r\n            setText(newText)\r\n            props.showAlert(\"Converted to lower case\",\"success\");\r\n      }\r\n      const handleClearClick = () =>{\r\n            let newText = \"\";\r\n            setText(newText)\r\n            props.showAlert(\"Cleared text\",\"success\");\r\n            \r\n            \r\n      }\r\n      const handleCopy = () =>{\r\n            \r\n            var text = document.getElementById(\"myBox\");\r\n            text.select();\r\n            navigator.clipboard.writeText(text.value);\r\n            props.showAlert(\"Copied  To Clipboard! \",\"success\");\r\n            \r\n      }\r\n      const handleExtraSpaces = () =>{\r\n            let newText = text.split(/[ ]+/);\r\n            setText(newText.join(\" \"))\r\n            props.showAlert(\"Removed extra spaces\",\"success\");\r\n      }\r\n      \r\n      const handleOnChange = (event) => {\r\n            // console.log(\"On Change\");\r\n            setText(event.target.value);\r\n      }\r\n      const [text,setText] = useState('');\r\n      \r\n      return (\r\n            <>\r\n            <div className = \"container\"  style ={{color:props.mode==='dark' ? 'white':'#042743'}}>\r\n            <h1>{props.heading}  </h1>\r\n              <div className=\"mb-3\">\r\n              \r\n              <textarea className=\"form-control\"  value = {text} onChange = {handleOnChange} style={{backgroundColor:props.mode==='dark' ? 'grey':'white',color:props.mode==='dark' ? 'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n             \r\n              </div>  \r\n              <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n              \r\n              <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert To Lowercase</button>\r\n              <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n              <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n              <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n              \r\n            </div>\r\n            <div className=\"container my-3\" style ={{color:props.mode==='dark' ? 'white':'#042743'}}>\r\n                  <h1>Your Text summary</h1>\r\n                  <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                  <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n                  <h2>Preview</h2>\r\n                  <p>{text.length>0?text:\"Enter something above ☝️ to preview!\"}</p>\r\n                  \r\n            </div>\r\n            </>\r\n      )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n      const capitalize = (word)=>{\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n      }\r\n      return (\r\n          \r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                  <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            \r\n                  </div>\r\n           \r\n      )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() =>{\n       setAlert(null);\n    },1500);\n  }\n\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode( 'dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Enabled Dark Mode\",\"success\");\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Enabled Light Mode\",\"success\");\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title = \"TextUtils\" aboutText = \"About \" mode = {mode} toggleMode={toggleMode}/>\n      <Alert alert ={alert}/>\n      <div className = \"container my-3\">\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm showAlert ={showAlert}heading =\"Enter the text to analyze below\" mode ={mode}/>\n           \n          {/* </Route>\n        </Switch> */}\n        </div>\n      {/* </Router> */}\n      \n      {/* <About /> */}\n     \n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}